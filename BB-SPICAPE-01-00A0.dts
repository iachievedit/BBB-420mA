// Copyright (c) 2015, iAchieved.it LLC
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
// OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
// CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
/dts-v1/;
/plugin/;

/ {
  compatible = "ti,beaglebone", "ti,beaglebone-black";
  
  /* identification */
  part-number = "BB-SPICAPE-01";
  version = "00A0";
  
  /* state the resources this cape uses */
  exclusive-use =
    /* the pin header uses */
    "P9.17", /* spi0_cs0 */
    "P9.18", /* spi0_d1 */
    "P9.21", /* spi0_d0 */
    "P9.22", /* spi0_sclk */
    "P9.28", /* spi1_cs0 */
    "P9.29", /* spi1_d0 */
    "P9.30", /* spi1_d1 */
    "P9.31", /* spi1_sclk */
    "P9.42", /* spi1_cs1 */
    "P8.10", /* spi1_cs2, but not really */
    /* the hardware ip uses */
    "spi0",
    "spi1",
    "gpio2_4";

  fragment@0 {
    target = <&am33xx_pinmux>;

    __overlay__ {
		
      /* avoid stupid warning */
#address-cells = <1>;
#size-cells = <1>;

   my_gpio_pins: pinmux_my_gpio_pins {
	pinctrl-single,pins = <
	/* the gpio pin(s) */
	  0x098 0x17    /* P8 10 gpio2_4.spi1_cs2 OUTPUT_PULLUP | MODE7 */
	>;
   };

    bb_spi0_pins: pinmux_bb_spi0_pins {
	pinctrl-single,pins = <
	  0x150 0x30	/* spi0_sclk.spi0_sclk, INPUT_PULLUP | MODE0 */
	  0x154 0x30	/* spi0_d0.spi0_d0, INPUT_PULLUP | MODE0 */
	  0x158 0x10	/* spi0_d1.spi0_d1, OUTPUT_PULLUP | MODE0 */
	  0x15c 0x10	/* spi0_cs0.spi0_cs0, OUTPUT_PULLUP | MODE0 */
	  >;
      };

    bb_spi1_pins: pinmux_bb_spi1_pins {
	pinctrl-single,pins = <
	  0x190 0x33	/* mcasp0_aclkx.spi1_sclk, INPUT_PULLUP | MODE3 */
	  0x194 0x33	/* mcasp0_fsx.spi1_d0, INPUT_PULLUP | MODE3 */
	  0x198 0x13	/* mcasp0_axr0.spi1_d1, OUTPUT_PULLUP | MODE3 */
	  0x19c 0x13	/* mcasp0_ahclkr.spi1_cs0, OUTPUT_PULLUP | MODE3 */
	  0x164 0x12	/* eCAP0_in_PWM0_out.spi1_cs1 OUTPUT_PULLUP | MODE2 */
	  >;
      };

    };
  };

  fragment@1 {
    target = <&ocp>;
    __overlay__ {
      spi1_cs2 {
      compatible = "gpio-of-helper";
      status = "okay";
      pinctrl-names = "default";
      pinctrl-0 = <>;
  
      P8_10 {
        gpio-name = "spi1_cs2";
        gpio = <&gpio2 4 0>;
        output;
        init-high;
      };
    };
    };
  };

  fragment@2 {
    target = <&spi0>;	/* spi0 is numbered correctly */
    __overlay__ {
      status = "okay";
      pinctrl-names = "default";
      pinctrl-0 = <&bb_spi0_pins>;

#address-cells = <1>;
#size-cells = <0>;

      spi0@0{
#address-cells = <1>;
#size-cells = <0>;
	compatible = "spidev";
	reg = <0>;
	spi-max-frequency = <16000000>;
	spi-cpol;
	spi-cpha;          
      };
    };
  };

  fragment@3 {
    target-path = "/ocp/interrupt-controller@48200000";
    __overlay__ {
#gpio-cells = <2>;
    };
  };

  fragment@4 {
    target = <&spi1>;	/* spi1 is numbered correctly */
    __overlay__ {
      status = "okay";
      pinctrl-names = "default";
      pinctrl-0 = <&bb_spi1_pins>;

#address-cells = <1>;
#size-cells = <0>;

      cs-gpios = <0>, <1>, <&gpio2 4 0>;

      spi1@0 {
#address-cells = <1>;
#size-cells = <0>;
	compatible = "spidev";
	reg = <0>;
	spi-max-frequency = <16000000>;
	spi-cpol;
	spi-cpha;          
      };

      spi1@1 {
#address-cells = <1>;
#size-cells = <0>;
	compatible = "spidev";
	reg = <1>;
	spi-max-frequency = <16000000>;
	spi-cpol;
	spi-cpha;
      };

      spi1@2 {
#address-cells = <1>;
#size-cells = <0>;
	compatible = "spidev";
	reg = <2>;
	spi-max-frequency = <16000000>;
	spi-cpol;
	spi-cpha;
      };
    };
  };
 };
